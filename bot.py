from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, filters
import datetime
import random
import json
import os

import os
TOKEN = os.getenv("BOT_TOKEN")

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "user_data.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
user_data = load_data()

def main_menu():
    return ReplyKeyboardMarkup([
        ['üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
        ['üé≠ –ü–∞—Ç—Ç–µ—Ä–Ω—ã', 'üìö –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è'],
        ['üåø –ì–µ—Ä–±–∞—Ä–∏–π', 'üéµ –°–∞—É–Ω–¥—Ç—Ä–µ–∫']
    ], resize_keyboard=True)

# –î–µ—Ç–µ–∫—Ç–æ—Ä —ç–º–æ—Ü–∏–π
def detect_emotions(text):
    emotions_map = {
        '—Ä–∞–¥–æ—Å—Ç—å': ['—Ä–∞–¥', '—Å—á–∞—Å—Ç–ª–∏–≤', '–≤–µ—Å–µ–ª', '—É—Ä–∞', '—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–ª—é–±–ª—é', '–Ω—Ä–∞–≤–∏—Ç—Å—è'],
        '–≥—Ä—É—Å—Ç—å': ['–≥—Ä—É—Å—Ç–Ω', '–ø–µ—á–∞–ª', '—Ç–æ—Å–∫', '–ø–ª–æ—Ö–æ', '–æ–±–∏–¥', '–∂–∞–ª—å', '–ø–ª–∞—á', '—Å–ª–µ–∑'],
        '—Ç—Ä–µ–≤–æ–≥–∞': ['—Ç—Ä–µ–≤–æ–≥', '–≤–æ–ª–Ω–µ–Ω', '–±–æ—é—Å—å', '—Å—Ç—Ä–∞—Ö', '–Ω–µ—Ä–≤', '–ø–µ—Ä–µ–∂–∏–≤', '–æ–ø–∞—Å–µ–Ω', '–ø–∞–Ω–∏–∫'],
        '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ': ['—Å–ø–æ–∫–æ', '–º–∏—Ä', '—Ç–∏—Ö', '—É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω', '—Ä–∞—Å—Å–ª–∞–±–ª', '–±–µ–∑–º—è—Ç–µ–∂'],
        '–≥–Ω–µ–≤': ['–∑–ª–æ', '–≥–Ω–µ–≤', '—Ä–∞–∑–¥—Ä–∞–∂', '–±–µ—Å–∏—Ç', '—è—Ä–æ—Å—Ç', '–∑–ª—é—Å—å', '–Ω–µ–Ω–∞–≤–∏—Å—Ç—å'],
        '–≥–æ—Ä–¥–æ—Å—Ç—å': ['–≥–æ—Ä–¥', '–≥–æ—Ä–∂—É—Å—å', '–ø–æ–±–µ–¥–∞', '—É—Å–ø–µ—Ö', '–¥–æ—Å—Ç–∏–≥', '–º–æ–ª–æ–¥–µ—Ü'],
        '–ª—é–±–æ–≤—å': ['–ª—é–±–ª', '–æ–±–æ–∂–∞—é', '—Å–∏–º–ø–∞—Ç–∏—è', '–ø—Ä–∏–≤—è–∑–∞–Ω', '–¥–æ—Ä–æ–≥', '–º–∏–ª'],
        '—É–¥–∏–≤–ª–µ–Ω–∏–µ': ['—É–¥–∏–≤–ª', '–Ω–µ–æ–∂–∏–¥–∞–Ω', '—Å—é—Ä–ø—Ä–∏–∑', '–≤–æ—Ç —ç—Ç–æ –¥–∞', '–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω'],
        '–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å': ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä–Ω', '–ø—Ä–∏–∑–Ω–∞—Ç–µ–ª', '—Ü–µ–Ω—é'],
        '–Ω–∞–¥–µ–∂–¥–∞': ['–Ω–∞–¥–µ–∂–¥–∞', '–≤–µ—Ä—é', '–æ–∂–∏–¥–∞—é', '–º–µ—á—Ç–∞', '—Ö–æ—á—É']
    }
    
    detected = []
    text_lower = text.lower()
    for emotion, keywords in emotions_map.items():
        if any(keyword in text_lower for keyword in keywords):
            detected.append(emotion)
    
    return detected if detected else ['–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ']

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    user_id = str(user.id)
    
    if user_id not in user_data:
        user_data[user_id] = {
            'name': user.first_name,
            'entries': [],
            'emotions_collected': set(),
            'registration_date': datetime.datetime.now().strftime("%d.%m.%Y"),
            'level': 1
        }
        save_data(user_data)
    
    await update.message.reply_text(
        f"üñã *–ß–µ—Ä–Ω–∏–ª—å–Ω–æ–µ –ø—è—Ç–Ω–æ –æ–∂–∏–≤–∞–µ—Ç...*\n\n"
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user.first_name}! –Ø ‚Äî –ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å –≠–º–æ—Ü–∏–π.\n"
        f"–•—Ä–∞–Ω–∏—Ç–µ–ª—å —Ç–≤–æ–∏—Ö –º—ã—Å–ª–µ–π –∏ —á—É–≤—Å—Ç–≤.\n\n"
        f"*–¢–≤–æ–π —Å–≤–∏—Ç–æ–∫ –Ω–∞—á–∞—Ç {user_data[user_id]['registration_date']}*\n"
        f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='Markdown',
        reply_markup=main_menu()
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: CallbackContext):
    help_text = """
üìñ *–°–≤–∏—Ç–æ–∫ –∑–Ω–∞–Ω–∏–π –ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å–æ–º
/help - –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
/record - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/pattern - –ù–∞–π—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è—Ö
/memory - –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/herobarium - –ú–æ–π –≥–µ—Ä–±–∞—Ä–∏–π —ç–º–æ—Ü–∏–π
/soundtrack - –°–∞—É–Ω–¥—Ç—Ä–µ–∫ –Ω–µ–¥–µ–ª–∏
/chaos - –ê—Ä—Ö–∏–≤–Ω—ã–π –ø—Ä–æ–∏–∑–≤–æ–ª
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/reset - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ

*–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!*
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /record
async def record_command(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üñã *–ü–µ—Ä–≥–∞–º–µ–Ω—Ç –∏ —á–µ—Ä–Ω–∏–ª–∞ –≥–æ—Ç–æ–≤—ã!*\n\n"
        "–û–ø–∏—à–∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —ç–º–æ—Ü–∏–∏...",
        parse_mode='Markdown'
    )

# –ö–æ–º–∞–Ω–¥–∞ /stats
async def stats_command(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    
    if user_id not in user_data or not user_data[user_id]['entries']:
        await update.message.reply_text("üìä *–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç*\n\n–°–æ–∑–¥–∞–π –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å!", parse_mode='Markdown')
        return
    
    user = user_data[user_id]
    entries = user['entries']
    
    # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
    emotion_count = {}
    for entry in entries:
        for emotion in entry.get('emotions', []):
            emotion_count[emotion] = emotion_count.get(emotion, 0) + 1
    
    total_entries = len(entries)
    total_days = len(set(entry['date'] for entry in entries))
    most_common_emotion = max(emotion_count.items(), key=lambda x: x[1]) if emotion_count else ('–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö', 0)
    
    stats_text = f"""
üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è*

üìñ **–û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞:**
–ó–∞–ø–∏—Å–µ–π –≤ –∞—Ä—Ö–∏–≤–µ: {total_entries}
–î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {total_days}
–£—Ä–æ–≤–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏: {user['level']}

üé≠ **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–∞–Ω–¥—à–∞—Ñ—Ç:**
–í—Å–µ–≥–æ —ç–º–æ—Ü–∏–π: {len(user['emotions_collected'])}
–°–∞–º–∞—è —á–∞—Å—Ç–∞—è: {most_common_emotion[0]} ({most_common_emotion[1]} —Ä–∞–∑)

üí´ *–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å!*
    """
    await update.message.reply_text(stats_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /pattern
async def pattern_command(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    
    if user_id not in user_data or len(user_data[user_id]['entries']) < 5:
        await update.message.reply_text(
            "üîç *–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö!*\n\n"
            "–°–æ–∑–¥–∞–π —Ö–æ—Ç—è –±—ã 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.",
            parse_mode='Markdown'
        )
        return
    
    await update.message.reply_text(
        "üîç *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —É–∑–æ—Ä—ã –≤ —Ç–≤–æ–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –ø–æ–ª–æ—Ç–Ω–µ...*\n\n"
        "–ü–æ–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—é—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è.\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏—Ö –∏–Ω—Å–∞–π—Ç–æ–≤! üß©",
        parse_mode='Markdown'
    )

# –ö–æ–º–∞–Ω–¥–∞ /memory
async def memory_command(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    
    if user_id not in user_data or not user_data[user_id]['entries']:
        await update.message.reply_text("üìú *–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç*\n\n–í–µ—Ä–Ω–∏—Å—å —Å –ø–µ—Ä–≤—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏!", parse_mode='Markdown')
        return
    
    entries = user_data[user_id]['entries']
    memory = random.choice(entries)
    
    memory_text = f"""
üìú *–î–æ—Å—Ç–∞—é —Å–ª—É—á–∞–π–Ω—ã–π —Å–≤–∏—Ç–æ–∫...*

*¬´{memory['text']}¬ª*

‚è∞ *{memory['date']} {memory['time']}*
üí´ *–≠–º–æ—Ü–∏–∏:* {', '.join(memory.get('emotions', ['–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã']))}

*–≠—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –±—ã–ª –≤–∞–∂–µ–Ω?*
    """
    await update.message.reply_text(memory_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /herobarium
async def herobarium_command(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    
    if user_id not in user_data:
        user_data[user_id] = {
            'name': update.effective_user.first_name,
            'entries': [],
            'emotions_collected': set(),
            'registration_date': datetime.datetime.now().strftime("%d.%m.%Y"),
            'level': 1
        }
    
    emotions = user_data[user_id]['emotions_collected']
    emotion_count = len(emotions)
    
    herobarium_text = f"""
üå∏ *–¢–≤–æ–π –ì–µ—Ä–±–∞—Ä–∏–π –≠–º–æ—Ü–∏–π*

üåø **–°–æ–±—Ä–∞–Ω–æ —ç–º–æ—Ü–∏–π:** {emotion_count}/15

{', '.join(f'‚Ä¢ {emotion}' for emotion in emotions) if emotions else '‚Ä¢ –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞'}

üéØ **–¶–µ–ª—å:** –°–æ–±–µ—Ä–∏ –≤—Å–µ 15 –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π!
üí´ *–ö–∞–∂–¥–∞—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ü–µ–ª–∏*
    """
    await update.message.reply_text(herobarium_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /soundtrack
async def soundtrack_command(update: Update, context: CallbackContext):
    soundtracks = [
        "üéµ –°–∞—É–Ω–¥—Ç—Ä–µ–∫ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è\nhttps://music.yandex.ru/track/38274614?utm_source=web&utm_medium=copy_link",
        "üé∂ –î–ª—è –ø–æ–¥–Ω—è—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\nhttps://music.yandex.ru/track/72875163?utm_source=web&utm_medium=copy_link",
        "üéß –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ –∑–≤—É–∫–∏\nhttps://music.yandex.ru/track/128072878?utm_source=web&utm_medium=copy_link",
        "üéº –ö–ª–∞—Å—Å–∏–∫–∞ –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏\nhttps://music.yandex.ru/track/132292476?utm_source=web&utm_medium=copy_link"
    ]
    
    await update.message.reply_text(
        random.choice(soundtracks) + "\n\n–ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è! üéß"
    )
# –ö–æ–º–∞–Ω–¥–∞ /chaos
async def chaos_command(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    
    if user_id not in user_data or not user_data[user_id]['entries']:
        await update.message.reply_text("üåÄ *–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç!*\n\n–°–æ–∑–¥–∞–π —Ö–∞–æ—Å –∏–∑ –∑–∞–ø–∏—Å–µ–π!", parse_mode='Markdown')
        return
    
    entries = user_data[user_id]['entries']
    
    # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–ø–∏—Å—å –∏ –Ω–µ–º–Ω–æ–≥–æ "—Ö–∞–æ—Å–∞"
    memory = random.choice(entries)
    chaos_phrases = [
        "–ê —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç —Ç—ã –ø–æ–º–Ω–∏—à—å?",
        "–í–æ—Ç —ç—Ç–æ –≤–Ω–µ–∑–∞–ø–Ω–æ!",
        "–°–ª—É—á–∞–π–Ω–æ—Å—Ç—å? –ù–µ –¥—É–º–∞—é...",
        "–í—Å–µ–ª–µ–Ω–Ω–∞—è —à–µ–ø—á–µ—Ç —Ç–µ–±–µ...",
        "–ó–∞–±—ã—Ç—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏"
    ]
    
    chaos_text = f"""
üåÄ *–ê—Ä—Ö–∏–≤–Ω—ã–π –ø—Ä–æ–∏–∑–≤–æ–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*

*¬´{memory['text']}¬ª*

‚è∞ *–ò–∑ –≥–ª—É–±–∏–Ω—ã –∞—Ä—Ö–∏–≤–∞*
üí´ {random.choice(chaos_phrases)}
    """
    await update.message.reply_text(chaos_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /profile
async def profile_command(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    user = update.effective_user
    
    if user_id not in user_data:
        user_data[user_id] = {
            'name': user.first_name,
            'entries': [],
            'emotions_collected': set(),
            'registration_date': datetime.datetime.now().strftime("%d.%m.%Y"),
            'level': 1
        }
    
    user_data_entry = user_data[user_id]
    entries_count = len(user_data_entry['entries'])
    emotions_count = len(user_data_entry['emotions_collected'])
    
    profile_text = f"""
üë§ *–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å*

üìõ –ò–º—è: {user.first_name}
üìÖ –í –∞—Ä—Ö–∏–≤–µ —Å: {user_data_entry['registration_date']}
üìñ –ó–∞–ø–∏—Å–µ–π: {entries_count}
üåø –≠–º–æ—Ü–∏–π —Å–æ–±—Ä–∞–Ω–æ: {emotions_count}
üéØ –£—Ä–æ–≤–µ–Ω—å: {user_data_entry['level']}

üí´ *–ü—Ä–æ–¥–æ–ª–∂–∞–π —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ!*
    """
    await update.message.reply_text(profile_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /reset
async def reset_command(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    
    if user_id in user_data:
        del user_data[user_id]
        save_data(user_data)
    
    await update.message.reply_text(
        "üîÑ *–ê—Ä—Ö–∏–≤ –æ—á–∏—â–µ–Ω!*\n\n"
        "–¢—ã –Ω–∞—á–∏–Ω–∞–µ—à—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏.",
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞–ø–∏—Å–µ–π)
async def handle_message(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    text = update.message.text
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if user_id not in user_data:
        user_data[user_id] = {
            'name': update.effective_user.first_name,
            'entries': [],
            'emotions_collected': set(),
            'registration_date': datetime.datetime.now().strftime("%d.%m.%Y"),
            'level': 1
        }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if text == 'üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å':
        await update.message.reply_text(
            "üñã *–ü–µ—Ä–≥–∞–º–µ–Ω—Ç –∏ —á–µ—Ä–Ω–∏–ª–∞ –≥–æ—Ç–æ–≤—ã!*\n\n"
            "–û–ø–∏—à–∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —ç–º–æ—Ü–∏–∏...",
            parse_mode='Markdown'
        )
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await stats_command(update, context)
    elif text == 'üé≠ –ü–∞—Ç—Ç–µ—Ä–Ω—ã':
        await pattern_command(update, context)
    elif text == 'üìö –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è':
        await memory_command(update, context)
    elif text == 'üåø –ì–µ—Ä–±–∞—Ä–∏–π':
        await herobarium_command(update, context)
    elif text == 'üéµ –°–∞—É–Ω–¥—Ç—Ä–µ–∫':
        await soundtrack_command(update, context)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        emotions = detect_emotions(text)
        entry = {
            'text': text,
            'time': datetime.datetime.now().strftime("%H:%M"),
            'date': datetime.datetime.now().strftime("%d.%m.%Y"),
            'emotions': emotions
        }
        
        user_data[user_id]['entries'].append(entry)
        user_data[user_id]['emotions_collected'].update(emotions)
        
        # –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤
        entries_count = len(user_data[user_id]['entries'])
        if entries_count >= 20:
            user_data[user_id]['level'] = 3
        elif entries_count >= 10:
            user_data[user_id]['level'] = 2
        
        save_data(user_data)
        
        await update.message.reply_text(
            f"üí´ *–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–¥ —Å–∏–º–≤–æ–ª–æ–º '{random.choice(['–ö—Ä—ã–ª–∞—Ç—ã–π –∫–ª—é—á', '–°–∏—è—é—â–∏–π —Å–≤–∏—Ç–æ–∫', '–í–µ—á–Ω—ã–π –ø–µ—Ä–≥–∞–º–µ–Ω—Ç'])}'*\n\n"
            f"*–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —ç–º–æ—Ü–∏–∏:* {', '.join(emotions) if emotions else '–ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª'}\n"
            f"*–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:* {len(user_data[user_id]['entries'])}\n"
            f"*–£—Ä–æ–≤–µ–Ω—å:* {user_data[user_id]['level']}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å? üó∫Ô∏è",
            parse_mode='Markdown',
            reply_markup=main_menu()
        )

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("record", record_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("pattern", pattern_command))
    application.add_handler(CommandHandler("memory", memory_command))
    application.add_handler(CommandHandler("herobarium", herobarium_command))
    application.add_handler(CommandHandler("soundtrack", soundtrack_command))
    application.add_handler(CommandHandler("chaos", chaos_command))
    application.add_handler(CommandHandler("profile", profile_command))
    application.add_handler(CommandHandler("reset", reset_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("‚úÖ –ë–û–¢ –ó–ê–ü–£–©–ï–ù! –ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å –≠–º–æ—Ü–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()
